%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Saturday, August 19, 2017 7:21:13 PM JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
174 174 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
174.000 0 l
174.000 174.000 l
0 174.000 l
0 0 l
h
f
0 0 0 RG
1.50000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
0 0 174 174 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 164 164 rc
1.00000 w
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
1.50000 w
0 J
1 j
q
q
24.0450 7.03160 128.887 154.968 rc
newpath
25.0450 9.03160 m
25.6776 9.03160 l
26.3102 9.03932 l
26.9428 9.05474 l
27.5754 9.07788 l
28.2080 9.10873 l
28.8406 9.14730 l
29.4732 9.19358 l
30.1058 9.24758 l
30.7384 9.30929 l
31.3710 9.37872 l
32.0036 9.45585 l
32.6362 9.54071 l
33.2688 9.63327 l
33.9014 9.73355 l
34.5340 9.84153 l
35.1666 9.95724 l
35.7992 10.0806 l
36.4318 10.2118 l
37.0644 10.3506 l
37.6970 10.4972 l
38.3296 10.6514 l
38.9622 10.8134 l
39.5948 10.9831 l
40.2274 11.1605 l
40.8600 11.3457 l
41.4926 11.5385 l
42.1252 11.7391 l
42.7578 11.9474 l
43.3904 12.1633 l
44.0230 12.3870 l
44.6556 12.6184 l
45.2882 12.8576 l
45.9208 13.1044 l
46.5534 13.3590 l
47.1860 13.6212 l
47.8186 13.8912 l
48.4512 14.1689 l
49.0838 14.4543 l
49.7164 14.7474 l
50.3490 15.0483 l
50.9816 15.3568 l
51.6142 15.6731 l
52.2468 15.9971 l
52.8794 16.3288 l
53.5120 16.6682 l
54.1446 17.0153 l
54.7772 17.3701 l
55.4098 17.7327 l
56.0424 18.1029 l
56.6750 18.4809 l
57.3076 18.8666 l
57.9402 19.2600 l
58.5728 19.6611 l
59.2054 20.0699 l
59.8380 20.4865 l
60.4706 20.9107 l
61.1032 21.3427 l
61.7358 21.7824 l
62.3684 22.2298 l
63.0010 22.6849 l
63.6336 23.1477 l
64.2662 23.6182 l
64.8988 24.0965 l
65.5314 24.5825 l
66.1640 25.0761 l
66.7966 25.5775 l
67.4292 26.0866 l
68.0618 26.6035 l
68.6944 27.1280 l
69.3270 27.6602 l
69.9596 28.2002 l
70.5922 28.7479 l
71.2248 29.3033 l
71.8574 29.8664 l
72.4900 30.4372 l
73.1226 31.0157 l
73.7552 31.6020 l
74.3878 32.1959 l
75.0204 32.7976 l
75.6530 33.4070 l
76.2856 34.0241 l
76.9182 34.6489 l
77.5508 35.2814 l
78.1834 35.9217 l
78.8160 36.5696 l
79.4486 37.2253 l
80.0812 37.8887 l
80.7138 38.5598 l
81.3464 39.2386 l
81.9790 39.9251 l
82.6116 40.6193 l
83.2442 41.3213 l
83.8768 42.0309 l
84.5094 42.7483 l
85.1420 43.4734 l
85.7746 44.2062 l
86.4072 44.9467 l
87.0398 45.6950 l
87.6724 46.4509 l
88.3050 47.2146 l
88.9376 47.9859 l
89.5702 48.7650 l
90.2028 49.5518 l
90.8354 50.3463 l
91.4680 51.1486 l
92.1006 51.9585 l
92.7332 52.7762 l
93.3658 53.6015 l
93.9984 54.4346 l
94.6310 55.2754 l
95.2636 56.1239 l
95.8962 56.9802 l
96.5288 57.8441 l
97.1614 58.7158 l
97.7940 59.5951 l
98.4266 60.4822 l
99.0592 61.3770 l
99.6918 62.2795 l
100.324 63.1897 l
100.957 64.1077 l
101.589 65.0333 l
102.222 65.9667 l
102.854 66.9078 l
103.487 67.8565 l
104.120 68.8130 l
104.752 69.7773 l
105.385 70.7492 l
106.017 71.7288 l
106.650 72.7162 l
107.283 73.7113 l
107.915 74.7141 l
108.548 75.7245 l
109.180 76.7428 l
109.813 77.7687 l
110.446 78.8023 l
111.078 79.8437 l
111.711 80.8928 l
112.343 81.9495 l
112.976 83.0140 l
113.609 84.0863 l
114.241 85.1662 l
114.874 86.2538 l
115.506 87.3492 l
116.139 88.4522 l
116.772 89.5630 l
117.404 90.6815 l
118.037 91.8077 l
118.669 92.9416 l
119.302 94.0833 l
119.935 95.2326 l
120.567 96.3897 l
121.200 97.5544 l
121.832 98.7269 l
122.465 99.9071 l
123.098 101.095 l
123.730 102.290 l
124.363 103.494 l
124.995 104.705 l
125.628 105.923 l
126.261 107.150 l
126.893 108.384 l
127.526 109.626 l
128.158 110.876 l
128.791 112.133 l
129.424 113.398 l
130.056 114.671 l
130.689 115.951 l
131.321 117.240 l
131.954 118.535 l
132.587 119.839 l
133.219 121.150 l
133.852 122.469 l
134.484 123.796 l
135.117 125.131 l
135.750 126.473 l
136.382 127.823 l
137.015 129.180 l
137.647 130.546 l
138.280 131.919 l
138.913 133.300 l
139.545 134.688 l
140.178 136.084 l
140.810 137.488 l
141.443 138.900 l
142.076 140.319 l
142.708 141.746 l
143.341 143.181 l
143.973 144.623 l
144.606 146.073 l
145.239 147.531 l
145.871 148.997 l
146.504 150.470 l
147.136 151.951 l
147.769 153.440 l
148.402 154.937 l
149.034 156.441 l
149.667 157.953 l
150.299 159.472 l
150.932 161.000 l
S
cliprestore
newpath
0 0 m
0 164.000 l
164.000 164.000 l
164.000 0 l
h
W
Q
Q
q
1.00000 w
2 J
0 j
q
0 J
1 j
newpath
23.0450 86.0000 m
150.932 86.0000 l
S
Q
0 J
1 j
q
q
0 w
newpath
37.0000 86.0000 m
37.0000 88.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
40.8774 105.088 m
40.1816 107.000 l
34.3222 107.000 l
34.3222 106.729 l
36.0459 105.156 37.2592 103.872 37.9624 102.876  c
38.6655 101.880 39.0170 100.969 39.0170 100.144  c
39.0170 99.5146 38.8242 98.9970 38.4384 98.5918  c
38.0527 98.1865 37.5913 97.9838 37.0542 97.9838  c
36.5659 97.9838 36.1276 98.1267 35.7395 98.4123  c
35.3513 98.6980 35.0644 99.1167 34.8789 99.6684  c
34.6079 99.6684 l
34.7299 98.7651 35.0437 98.0717 35.5490 97.5883  c
36.0544 97.1049 36.6855 96.8632 37.4423 96.8632  c
38.2480 96.8632 38.9206 97.1220 39.4602 97.6396  c
39.9997 98.1572 40.2695 98.7675 40.2695 99.4707  c
40.2695 99.9736 40.1523 100.476 39.9179 100.979  c
39.5566 101.770 38.9707 102.607 38.1601 103.491  c
36.9443 104.819 36.1850 105.620 35.8823 105.894  c
38.4751 105.894 l
39.0024 105.894 39.3723 105.874 39.5847 105.835  c
39.7971 105.796 39.9887 105.717 40.1596 105.597  c
40.3305 105.477 40.4794 105.308 40.6064 105.088  c
h
42.5419 102.092 m
42.5419 100.960 42.7128 99.9846 43.0546 99.1667  c
43.3964 98.3488 43.8505 97.7397 44.4169 97.3393  c
44.8564 97.0219 45.3105 96.8632 45.7793 96.8632  c
46.5410 96.8632 47.2246 97.2514 47.8300 98.0278  c
48.5869 98.9897 48.9653 100.293 48.9653 101.939  c
48.9653 103.091 48.7993 104.070 48.4672 104.876  c
48.1352 105.681 47.7116 106.266 47.1965 106.630  c
46.6814 106.993 46.1845 107.175 45.7060 107.175  c
44.7587 107.175 43.9702 106.616 43.3403 105.498  c
42.8081 104.556 42.5419 103.420 42.5419 102.092  c
h
43.9775 102.275 m
43.9775 103.643 44.1460 104.758 44.4829 105.623  c
44.7612 106.350 45.1762 106.714 45.7280 106.714  c
45.9917 106.714 46.2651 106.595 46.5483 106.359  c
46.8315 106.122 47.0463 105.725 47.1928 105.168  c
47.4174 104.329 47.5297 103.145 47.5297 101.616  c
47.5297 100.483 47.4126 99.5390 47.1782 98.7822  c
47.0024 98.2207 46.7753 97.8227 46.4970 97.5883  c
46.2968 97.4272 46.0551 97.3466 45.7719 97.3466  c
45.4399 97.3466 45.1445 97.4956 44.8857 97.7934  c
44.5341 98.1987 44.2949 98.8359 44.1679 99.7050  c
44.0410 100.574 43.9775 101.431 43.9775 102.275  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
50.0000 86.0000 m
50.0000 88.0000 l
S
Q
q
0 w
newpath
62.0000 86.0000 m
62.0000 88.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
65.7236 96.8632 m
65.7236 97.1342 l
65.0791 97.1977 64.5529 97.3259 64.1452 97.5188  c
63.7375 97.7116 63.3347 98.0058 62.9367 98.4013  c
62.5388 98.7968 62.2092 99.2375 61.9480 99.7233  c
61.6867 100.209 61.4682 100.786 61.2924 101.455  c
61.9956 100.972 62.7011 100.730 63.4091 100.730  c
64.0878 100.730 64.6762 101.003 65.1743 101.550  c
65.6723 102.097 65.9213 102.800 65.9213 103.660  c
65.9213 104.490 65.6699 105.247 65.1669 105.930  c
64.5615 106.760 63.7607 107.175 62.7646 107.175  c
62.0859 107.175 61.5097 106.951 61.0361 106.502  c
60.1084 105.627 59.6445 104.495 59.6445 103.103  c
59.6445 102.214 59.8227 101.370 60.1792 100.569  c
60.5356 99.7685 61.0446 99.0581 61.7063 98.4379  c
62.3679 97.8178 63.0014 97.4003 63.6069 97.1855  c
64.2124 96.9707 64.7763 96.8632 65.2988 96.8632  c
h
61.1679 101.990 m
61.0800 102.649 61.0361 103.181 61.0361 103.586  c
61.0361 104.055 61.1228 104.564 61.2961 105.114  c
61.4694 105.663 61.7270 106.099 62.0688 106.421  c
62.3178 106.650 62.6206 106.765 62.9770 106.765  c
63.4018 106.765 63.7814 106.565 64.1159 106.165  c
64.4504 105.764 64.6176 105.193 64.6176 104.451  c
64.6176 103.616 64.4516 102.893 64.1196 102.283  c
63.7876 101.672 63.3164 101.367 62.7060 101.367  c
62.5205 101.367 62.3215 101.406 62.1091 101.484  c
61.8967 101.563 61.5830 101.731 61.1679 101.990  c
h
67.5419 102.092 m
67.5419 100.960 67.7128 99.9846 68.0546 99.1667  c
68.3964 98.3488 68.8505 97.7397 69.4169 97.3393  c
69.8564 97.0219 70.3105 96.8632 70.7793 96.8632  c
71.5410 96.8632 72.2246 97.2514 72.8300 98.0278  c
73.5869 98.9897 73.9653 100.293 73.9653 101.939  c
73.9653 103.091 73.7993 104.070 73.4672 104.876  c
73.1352 105.681 72.7116 106.266 72.1965 106.630  c
71.6814 106.993 71.1845 107.175 70.7060 107.175  c
69.7587 107.175 68.9702 106.616 68.3403 105.498  c
67.8081 104.556 67.5419 103.420 67.5419 102.092  c
h
68.9775 102.275 m
68.9775 103.643 69.1460 104.758 69.4829 105.623  c
69.7612 106.350 70.1762 106.714 70.7280 106.714  c
70.9917 106.714 71.2651 106.595 71.5483 106.359  c
71.8315 106.122 72.0463 105.725 72.1928 105.168  c
72.4174 104.329 72.5297 103.145 72.5297 101.616  c
72.5297 100.483 72.4126 99.5390 72.1782 98.7822  c
72.0024 98.2207 71.7753 97.8227 71.4970 97.5883  c
71.2968 97.4272 71.0551 97.3466 70.7719 97.3466  c
70.4399 97.3466 70.1445 97.4956 69.8857 97.7934  c
69.5341 98.1987 69.2949 98.8359 69.1679 99.7050  c
69.0410 100.574 68.9775 101.431 68.9775 102.275  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
75.0000 86.0000 m
75.0000 88.0000 l
S
Q
q
0 w
newpath
88.0000 86.0000 m
88.0000 88.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
81.7578 98.0424 m
84.1748 96.8632 l
84.4165 96.8632 l
84.4165 105.249 l
84.4165 105.806 84.4397 106.152 84.4860 106.289  c
84.5324 106.426 84.6289 106.531 84.7753 106.604  c
84.9218 106.677 85.2197 106.719 85.6689 106.729  c
85.6689 107.000 l
81.9335 107.000 l
81.9335 106.729 l
82.4023 106.719 82.7050 106.679 82.8418 106.608  c
82.9785 106.537 83.0737 106.442 83.1274 106.322  c
83.1811 106.202 83.2080 105.845 83.2080 105.249  c
83.2080 99.8881 l
83.2080 99.1655 83.1835 98.7016 83.1347 98.4965  c
83.1005 98.3403 83.0383 98.2255 82.9480 98.1523  c
82.8576 98.0791 82.7490 98.0424 82.6220 98.0424  c
82.4414 98.0424 82.1899 98.1181 81.8676 98.2695  c
h
88.5419 102.092 m
88.5419 100.960 88.7128 99.9846 89.0546 99.1667  c
89.3964 98.3488 89.8505 97.7397 90.4169 97.3393  c
90.8564 97.0219 91.3105 96.8632 91.7793 96.8632  c
92.5410 96.8632 93.2246 97.2514 93.8300 98.0278  c
94.5869 98.9897 94.9653 100.293 94.9653 101.939  c
94.9653 103.091 94.7993 104.070 94.4672 104.876  c
94.1352 105.681 93.7116 106.266 93.1965 106.630  c
92.6814 106.993 92.1845 107.175 91.7060 107.175  c
90.7587 107.175 89.9702 106.616 89.3403 105.498  c
88.8081 104.556 88.5419 103.420 88.5419 102.092  c
h
89.9775 102.275 m
89.9775 103.643 90.1460 104.758 90.4829 105.623  c
90.7612 106.350 91.1762 106.714 91.7280 106.714  c
91.9917 106.714 92.2651 106.595 92.5483 106.359  c
92.8315 106.122 93.0463 105.725 93.1928 105.168  c
93.4174 104.329 93.5297 103.145 93.5297 101.616  c
93.5297 100.483 93.4126 99.5390 93.1782 98.7822  c
93.0024 98.2207 92.7753 97.8227 92.4970 97.5883  c
92.2968 97.4272 92.0551 97.3466 91.7719 97.3466  c
91.4399 97.3466 91.1445 97.4956 90.8857 97.7934  c
90.5341 98.1987 90.2949 98.8359 90.1679 99.7050  c
90.0410 100.574 89.9775 101.431 89.9775 102.275  c
h
96.5419 102.092 m
96.5419 100.960 96.7128 99.9846 97.0546 99.1667  c
97.3964 98.3488 97.8505 97.7397 98.4169 97.3393  c
98.8564 97.0219 99.3105 96.8632 99.7793 96.8632  c
100.541 96.8632 101.224 97.2514 101.830 98.0278  c
102.586 98.9897 102.965 100.293 102.965 101.939  c
102.965 103.091 102.799 104.070 102.467 104.876  c
102.135 105.681 101.711 106.266 101.196 106.630  c
100.681 106.993 100.184 107.175 99.7060 107.175  c
98.7587 107.175 97.9702 106.616 97.3403 105.498  c
96.8081 104.556 96.5419 103.420 96.5419 102.092  c
h
97.9775 102.275 m
97.9775 103.643 98.1460 104.758 98.4829 105.623  c
98.7612 106.350 99.1762 106.714 99.7280 106.714  c
99.9917 106.714 100.265 106.595 100.548 106.359  c
100.831 106.122 101.046 105.725 101.192 105.168  c
101.417 104.329 101.529 103.145 101.529 101.616  c
101.529 100.483 101.412 99.5390 101.178 98.7822  c
101.002 98.2207 100.775 97.8227 100.497 97.5883  c
100.296 97.4272 100.055 97.3466 99.7719 97.3466  c
99.4399 97.3466 99.1445 97.4956 98.8857 97.7934  c
98.5341 98.1987 98.2949 98.8359 98.1679 99.7050  c
98.0410 100.574 97.9775 101.431 97.9775 102.275  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
100.000 86.0000 m
100.000 88.0000 l
S
Q
q
0 w
newpath
113.000 86.0000 m
113.000 88.0000 l
S
Q
q
0 w
newpath
126.000 86.0000 m
126.000 88.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
119.757 98.0424 m
122.174 96.8632 l
122.416 96.8632 l
122.416 105.249 l
122.416 105.806 122.439 106.152 122.486 106.289  c
122.532 106.426 122.628 106.531 122.775 106.604  c
122.921 106.677 123.219 106.719 123.668 106.729  c
123.668 107.000 l
119.933 107.000 l
119.933 106.729 l
120.402 106.719 120.705 106.679 120.841 106.608  c
120.978 106.537 121.073 106.442 121.127 106.322  c
121.181 106.202 121.208 105.845 121.208 105.249  c
121.208 99.8881 l
121.208 99.1655 121.183 98.7016 121.134 98.4965  c
121.100 98.3403 121.038 98.2255 120.948 98.1523  c
120.857 98.0791 120.749 98.0424 120.622 98.0424  c
120.441 98.0424 120.189 98.1181 119.867 98.2695  c
h
132.723 96.8632 m
132.723 97.1342 l
132.079 97.1977 131.553 97.3259 131.145 97.5188  c
130.737 97.7116 130.334 98.0058 129.936 98.4013  c
129.538 98.7968 129.209 99.2375 128.948 99.7233  c
128.686 100.209 128.468 100.786 128.292 101.455  c
128.995 100.972 129.701 100.730 130.409 100.730  c
131.087 100.730 131.676 101.003 132.174 101.550  c
132.672 102.097 132.921 102.800 132.921 103.660  c
132.921 104.490 132.669 105.247 132.167 105.930  c
131.561 106.760 130.760 107.175 129.764 107.175  c
129.085 107.175 128.509 106.951 128.036 106.502  c
127.108 105.627 126.644 104.495 126.644 103.103  c
126.644 102.214 126.822 101.370 127.179 100.569  c
127.535 99.7685 128.044 99.0581 128.706 98.4379  c
129.367 97.8178 130.001 97.4003 130.606 97.1855  c
131.212 96.9707 131.776 96.8632 132.298 96.8632  c
h
128.168 101.990 m
128.080 102.649 128.036 103.181 128.036 103.586  c
128.036 104.055 128.122 104.564 128.296 105.114  c
128.469 105.663 128.727 106.099 129.068 106.421  c
129.317 106.650 129.620 106.765 129.977 106.765  c
130.401 106.765 130.781 106.565 131.116 106.165  c
131.450 105.764 131.617 105.193 131.617 104.451  c
131.617 103.616 131.451 102.893 131.119 102.283  c
130.787 101.672 130.316 101.367 129.706 101.367  c
129.520 101.367 129.321 101.406 129.109 101.484  c
128.896 101.563 128.583 101.731 128.168 101.990  c
h
134.542 102.092 m
134.542 100.960 134.712 99.9846 135.054 99.1667  c
135.396 98.3488 135.850 97.7397 136.417 97.3393  c
136.856 97.0219 137.310 96.8632 137.779 96.8632  c
138.541 96.8632 139.224 97.2514 139.830 98.0278  c
140.586 98.9897 140.965 100.293 140.965 101.939  c
140.965 103.091 140.799 104.070 140.467 104.876  c
140.135 105.681 139.711 106.266 139.196 106.630  c
138.681 106.993 138.184 107.175 137.706 107.175  c
136.758 107.175 135.970 106.616 135.340 105.498  c
134.808 104.556 134.542 103.420 134.542 102.092  c
h
135.977 102.275 m
135.977 103.643 136.146 104.758 136.482 105.623  c
136.761 106.350 137.176 106.714 137.728 106.714  c
137.991 106.714 138.265 106.595 138.548 106.359  c
138.831 106.122 139.046 105.725 139.192 105.168  c
139.417 104.329 139.529 103.145 139.529 101.616  c
139.529 100.483 139.412 99.5390 139.178 98.7822  c
139.002 98.2207 138.775 97.8227 138.497 97.5883  c
138.296 97.4272 138.055 97.3466 137.772 97.3466  c
137.439 97.3466 137.144 97.4956 136.885 97.7934  c
136.534 98.1987 136.294 98.8359 136.168 99.7050  c
136.041 100.574 135.977 101.431 135.977 102.275  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
138.000 86.0000 m
138.000 88.0000 l
S
Q
q
0 w
newpath
151.000 86.0000 m
151.000 88.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
149.877 105.088 m
149.181 107.000 l
143.322 107.000 l
143.322 106.729 l
145.045 105.156 146.259 103.872 146.962 102.876  c
147.665 101.880 148.017 100.969 148.017 100.144  c
148.017 99.5146 147.824 98.9970 147.438 98.5918  c
147.052 98.1865 146.591 97.9838 146.054 97.9838  c
145.565 97.9838 145.127 98.1267 144.739 98.4123  c
144.351 98.6980 144.064 99.1167 143.878 99.6684  c
143.607 99.6684 l
143.730 98.7651 144.043 98.0717 144.549 97.5883  c
145.054 97.1049 145.685 96.8632 146.442 96.8632  c
147.248 96.8632 147.920 97.1220 148.460 97.6396  c
148.999 98.1572 149.269 98.7675 149.269 99.4707  c
149.269 99.9736 149.152 100.476 148.918 100.979  c
148.556 101.770 147.970 102.607 147.160 103.491  c
145.944 104.819 145.185 105.620 144.882 105.894  c
147.475 105.894 l
148.002 105.894 148.372 105.874 148.584 105.835  c
148.797 105.796 148.988 105.717 149.159 105.597  c
149.330 105.477 149.479 105.308 149.606 105.088  c
h
151.542 102.092 m
151.542 100.960 151.712 99.9846 152.054 99.1667  c
152.396 98.3488 152.850 97.7397 153.417 97.3393  c
153.856 97.0219 154.310 96.8632 154.779 96.8632  c
155.541 96.8632 156.224 97.2514 156.830 98.0278  c
157.586 98.9897 157.965 100.293 157.965 101.939  c
157.965 103.091 157.799 104.070 157.467 104.876  c
157.135 105.681 156.711 106.266 156.196 106.630  c
155.681 106.993 155.184 107.175 154.706 107.175  c
153.758 107.175 152.970 106.616 152.340 105.498  c
151.808 104.556 151.542 103.420 151.542 102.092  c
h
152.977 102.275 m
152.977 103.643 153.146 104.758 153.482 105.623  c
153.761 106.350 154.176 106.714 154.728 106.714  c
154.991 106.714 155.265 106.595 155.548 106.359  c
155.831 106.122 156.046 105.725 156.192 105.168  c
156.417 104.329 156.529 103.145 156.529 101.616  c
156.529 100.483 156.412 99.5390 156.178 98.7822  c
156.002 98.2207 155.775 97.8227 155.497 97.5883  c
155.296 97.4272 155.055 97.3466 154.772 97.3466  c
154.439 97.3466 154.144 97.4956 153.885 97.7934  c
153.534 98.1987 153.294 98.8359 153.168 99.7050  c
153.041 100.574 152.977 101.431 152.977 102.275  c
h
159.542 102.092 m
159.542 100.960 159.712 99.9846 160.054 99.1667  c
160.396 98.3488 160.850 97.7397 161.417 97.3393  c
161.856 97.0219 162.310 96.8632 162.779 96.8632  c
163.541 96.8632 164.224 97.2514 164.830 98.0278  c
165.586 98.9897 165.965 100.293 165.965 101.939  c
165.965 103.091 165.799 104.070 165.467 104.876  c
165.135 105.681 164.711 106.266 164.196 106.630  c
163.681 106.993 163.184 107.175 162.706 107.175  c
161.758 107.175 160.970 106.616 160.340 105.498  c
159.808 104.556 159.542 103.420 159.542 102.092  c
h
160.977 102.275 m
160.977 103.643 161.146 104.758 161.482 105.623  c
161.761 106.350 162.176 106.714 162.728 106.714  c
162.991 106.714 163.265 106.595 163.548 106.359  c
163.831 106.122 164.046 105.725 164.192 105.168  c
164.417 104.329 164.529 103.145 164.529 101.616  c
164.529 100.483 164.412 99.5390 164.178 98.7822  c
164.002 98.2207 163.775 97.8227 163.497 97.5883  c
163.296 97.4272 163.055 97.3466 162.772 97.3466  c
162.439 97.3466 162.144 97.4956 161.885 97.7934  c
161.534 98.1987 161.294 98.8359 161.168 99.7050  c
161.041 100.574 160.977 101.431 160.977 102.275  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
31.0000 86.0000 m
31.0000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
43.0000 86.0000 m
43.0000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
56.0000 86.0000 m
56.0000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
69.0000 86.0000 m
69.0000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
81.0000 86.0000 m
81.0000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
94.0000 86.0000 m
94.0000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
107.000 86.0000 m
107.000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
119.000 86.0000 m
119.000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
132.000 86.0000 m
132.000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
145.000 86.0000 m
145.000 87.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
2 J
0 j
q
0 J
1 j
newpath
23.0000 161.000 m
23.0000 9.03160 l
S
Q
0 J
1 j
q
q
0 w
newpath
23.0000 148.000 m
21.0000 148.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
6 145 9 16 rc
newpath
18.4531 153.890 m
8.54687 153.890 l
8.54687 153.109 l
18.4531 153.109 l
18.4531 153.890 l
h
f
Q
newpath
19.8784 152.997 m
19.0922 152.353 18.5856 151.835 18.3586 151.444  c
18.1315 151.054 18.0180 150.648 18.0180 150.229  c
18.0180 149.584 18.2670 149.029 18.7651 148.562  c
19.2631 148.096 19.9248 147.863 20.7500 147.863  c
21.5507 147.863 22.1953 148.080 22.6835 148.515  c
23.1718 148.949 23.4160 149.445 23.4160 150.002  c
23.4160 150.373 23.2841 150.751 23.0205 151.137  c
22.7568 151.522 22.2075 151.977 21.3725 152.499  c
22.2319 153.163 22.8007 153.686 23.0791 154.066  c
23.4502 154.564 23.6357 155.089 23.6357 155.641  c
23.6357 156.339 23.3696 156.936 22.8374 157.432  c
22.3051 157.928 21.6069 158.175 20.7426 158.175  c
19.8002 158.175 19.0654 157.880 18.5380 157.289  c
18.1181 156.815 17.9082 156.298 17.9082 155.736  c
17.9082 155.297 18.0559 154.861 18.3513 154.429  c
18.6467 153.997 19.1557 153.520 19.8784 152.997  c
h
21.0283 152.213 m
21.6142 151.686 21.9853 151.270 22.1416 150.965  c
22.2978 150.659 22.3759 150.314 22.3759 149.928  c
22.3759 149.416 22.2319 149.014 21.9438 148.723  c
21.6557 148.433 21.2627 148.288 20.7646 148.288  c
20.2666 148.288 19.8613 148.432 19.5488 148.720  c
19.2363 149.008 19.0800 149.345 19.0800 149.731  c
19.0800 149.984 19.1447 150.238 19.2741 150.492  c
19.4035 150.746 19.5878 150.988 19.8271 151.217  c
h
20.2226 153.275 m
19.8173 153.617 19.5170 153.990 19.3217 154.392  c
19.1264 154.795 19.0288 155.231 19.0288 155.700  c
19.0288 156.330 19.2009 156.834 19.5451 157.212  c
19.8894 157.591 20.3276 157.780 20.8598 157.780  c
21.3872 157.780 21.8095 157.631 22.1269 157.333  c
22.4443 157.035 22.6030 156.674 22.6030 156.249  c
22.6030 155.897 22.5102 155.583 22.3247 155.304  c
21.9780 154.787 21.2773 154.110 20.2226 153.275  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
23.0000 132.000 m
21.0000 132.000 l
S
Q
q
0 w
newpath
23.0000 117.000 m
21.0000 117.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
6 115 9 16 rc
newpath
18.4531 123.890 m
8.54687 123.890 l
8.54687 123.109 l
18.4531 123.109 l
18.4531 123.890 l
h
f
Q
newpath
23.9799 124.337 m
23.9799 125.377 l
22.6469 125.377 l
22.6469 128.000 l
21.4384 128.000 l
21.4384 125.377 l
17.2343 125.377 l
17.2343 124.440 l
21.8413 117.863 l
22.6469 117.863 l
22.6469 124.337 l
h
21.4384 124.337 m
21.4384 119.408 l
17.9521 124.337 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
23.0000 102.000 m
21.0000 102.000 l
S
Q
q
0 w
newpath
23.0000 86.0000 m
21.0000 86.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
17.5419 92.0927 m
17.5419 90.9599 17.7128 89.9846 18.0546 89.1667  c
18.3964 88.3488 18.8505 87.7397 19.4169 87.3393  c
19.8564 87.0219 20.3105 86.8632 20.7793 86.8632  c
21.5410 86.8632 22.2246 87.2514 22.8300 88.0278  c
23.5869 88.9897 23.9653 90.2934 23.9653 91.9389  c
23.9653 93.0913 23.7993 94.0703 23.4672 94.8759  c
23.1352 95.6816 22.7116 96.2663 22.1965 96.6301  c
21.6814 96.9939 21.1845 97.1757 20.7060 97.1757  c
19.7587 97.1757 18.9702 96.6167 18.3403 95.4985  c
17.8081 94.5561 17.5419 93.4209 17.5419 92.0927  c
h
18.9775 92.2758 m
18.9775 93.6430 19.1460 94.7587 19.4829 95.6230  c
19.7612 96.3505 20.1762 96.7143 20.7280 96.7143  c
20.9917 96.7143 21.2651 96.5959 21.5483 96.3591  c
21.8315 96.1223 22.0463 95.7255 22.1928 95.1689  c
22.4174 94.3291 22.5297 93.1450 22.5297 91.6167  c
22.5297 90.4838 22.4126 89.5390 22.1782 88.7822  c
22.0024 88.2207 21.7753 87.8227 21.4970 87.5883  c
21.2968 87.4272 21.0551 87.3466 20.7719 87.3466  c
20.4399 87.3466 20.1445 87.4956 19.8857 87.7934  c
19.5341 88.1987 19.2949 88.8359 19.1679 89.7050  c
19.0410 90.5742 18.9775 91.4311 18.9775 92.2758  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
23.0000 71.0000 m
21.0000 71.0000 l
S
Q
q
0 w
newpath
23.0000 55.0000 m
21.0000 55.0000 l
S
Q
q
0 w
newpath
23.0000 40.0000 m
21.0000 40.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
23.7236 39.8632 m
23.7236 40.1342 l
23.0791 40.1977 22.5529 40.3259 22.1452 40.5188  c
21.7375 40.7116 21.3347 41.0058 20.9367 41.4013  c
20.5388 41.7968 20.2092 42.2375 19.9480 42.7233  c
19.6867 43.2092 19.4682 43.7866 19.2924 44.4555  c
19.9956 43.9721 20.7011 43.7304 21.4091 43.7304  c
22.0878 43.7304 22.6762 44.0039 23.1743 44.5507  c
23.6723 45.0976 23.9213 45.8007 23.9213 46.6601  c
23.9213 47.4902 23.6699 48.2470 23.1669 48.9306  c
22.5615 49.7607 21.7607 50.1757 20.7646 50.1757  c
20.0859 50.1757 19.5097 49.9511 19.0361 49.5019  c
18.1084 48.6279 17.6445 47.4951 17.6445 46.1035  c
17.6445 45.2148 17.8227 44.3701 18.1792 43.5693  c
18.5356 42.7685 19.0446 42.0581 19.7063 41.4379  c
20.3679 40.8178 21.0014 40.4003 21.6069 40.1855  c
22.2124 39.9707 22.7763 39.8632 23.2988 39.8632  c
h
19.1679 44.9902 m
19.0800 45.6494 19.0361 46.1816 19.0361 46.5869  c
19.0361 47.0556 19.1228 47.5647 19.2961 48.1140  c
19.4694 48.6633 19.7270 49.0991 20.0688 49.4213  c
20.3178 49.6508 20.6206 49.7656 20.9770 49.7656  c
21.4018 49.7656 21.7814 49.5654 22.1159 49.1650  c
22.4504 48.7646 22.6176 48.1933 22.6176 47.4511  c
22.6176 46.6162 22.4516 45.8935 22.1196 45.2832  c
21.7876 44.6728 21.3164 44.3676 20.7060 44.3676  c
20.5205 44.3676 20.3215 44.4067 20.1091 44.4848  c
19.8967 44.5629 19.5830 44.7314 19.1679 44.9902  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
23.0000 24.0000 m
21.0000 24.0000 l
S
Q
q
0 w
newpath
23.0000 9.00000 m
21.0000 9.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
10.7578 11.0424 m
13.1748 9.86328 l
13.4165 9.86328 l
13.4165 18.2495 l
13.4165 18.8061 13.4397 19.1528 13.4860 19.2895  c
13.5324 19.4262 13.6289 19.5312 13.7753 19.6044  c
13.9218 19.6777 14.2197 19.7192 14.6689 19.7290  c
14.6689 20.0000 l
10.9335 20.0000 l
10.9335 19.7290 l
11.4023 19.7192 11.7050 19.6789 11.8418 19.6081  c
11.9785 19.5373 12.0737 19.4421 12.1274 19.3225  c
12.1811 19.2028 12.2080 18.8452 12.2080 18.2495  c
12.2080 12.8881 l
12.2080 12.1655 12.1835 11.7016 12.1347 11.4965  c
12.1005 11.3403 12.0383 11.2255 11.9480 11.1523  c
11.8576 11.0791 11.7490 11.0424 11.6220 11.0424  c
11.4414 11.0424 11.1899 11.1181 10.8676 11.2695  c
h
17.5419 15.0927 m
17.5419 13.9599 17.7128 12.9846 18.0546 12.1667  c
18.3964 11.3488 18.8505 10.7397 19.4169 10.3393  c
19.8564 10.0219 20.3105 9.86328 20.7793 9.86328  c
21.5410 9.86328 22.2246 10.2514 22.8300 11.0278  c
23.5869 11.9897 23.9653 13.2934 23.9653 14.9389  c
23.9653 16.0913 23.7993 17.0703 23.4672 17.8759  c
23.1352 18.6816 22.7116 19.2663 22.1965 19.6301  c
21.6814 19.9939 21.1845 20.1757 20.7060 20.1757  c
19.7587 20.1757 18.9702 19.6167 18.3403 18.4985  c
17.8081 17.5561 17.5419 16.4209 17.5419 15.0927  c
h
18.9775 15.2758 m
18.9775 16.6430 19.1460 17.7587 19.4829 18.6230  c
19.7612 19.3505 20.1762 19.7143 20.7280 19.7143  c
20.9917 19.7143 21.2651 19.5959 21.5483 19.3591  c
21.8315 19.1223 22.0463 18.7255 22.1928 18.1689  c
22.4174 17.3291 22.5297 16.1450 22.5297 14.6167  c
22.5297 13.4838 22.4126 12.5390 22.1782 11.7822  c
22.0024 11.2207 21.7753 10.8227 21.4970 10.5883  c
21.2968 10.4272 21.0551 10.3466 20.7719 10.3466  c
20.4399 10.3466 20.1445 10.4956 19.8857 10.7934  c
19.5341 11.1987 19.2949 11.8359 19.1679 12.7050  c
19.0410 13.5742 18.9775 14.4311 18.9775 15.2758  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
23.0000 156.000 m
22.0000 156.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
23.0000 140.000 m
22.0000 140.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
23.0000 125.000 m
22.0000 125.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
23.0000 109.000 m
22.0000 109.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
23.0000 94.0000 m
22.0000 94.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
23.0000 78.0000 m
22.0000 78.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
23.0000 63.0000 m
22.0000 63.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
23.0000 48.0000 m
22.0000 48.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
23.0000 32.0000 m
22.0000 32.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
23.0000 17.0000 m
22.0000 17.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
2 J
0 j
Q
Q
cliprestore
0 0 174 174 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
1.00000 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
