{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "def euler(x0, v0):\n",
    "  v1 = v0 - g * dt\n",
    "  x1 = x0 + v0 * dt\n",
    "  return x1, v1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def my_plot(xx, vv, tt):\n",
    "    plt.plot(tt, xx, color = 'b')\n",
    "    plt.plot(tt, vv, color = 'r')\n",
    "    plt.grid()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "g, dt, cc=0.1, 1, 0.1\n",
    "tt,xx,vv=[0.0],[10.0],[0.0]\n",
    "t = 0.0\n",
    "\n",
    "for i in range(0,50):\n",
    "  t += dt\n",
    "  x, v = euler(xx[-1],vv[-1])\n",
    "  tt.append(t)\n",
    "  xx.append(x)\n",
    "  vv.append(v)\n",
    "\n",
    "\n",
    "my_plot(xx, vv, tt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.animation as animation\n",
    "\n",
    "x_y= np.array(xx)\n",
    "v_y= np.array(vv)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.set_xlim(( 0, 50))\n",
    "ax.set_ylim((-20, 10))\n",
    "l_x, = ax.plot(x_y, 'b', lw=2)\n",
    "l_v, = ax.plot(v_y, 'r', lw=2)\n",
    "plt.close\n",
    "\n",
    "def init():\n",
    "    l_x.set_data([], [])\n",
    "    l_v.set_data([], [])\n",
    "    return (l_x, l_v)\n",
    "\n",
    "def animate(i):\n",
    "    x = np.arange(i)\n",
    "    l_x.set_data(x, x_y[:i])\n",
    "    l_v.set_data(x, v_y[:i])\n",
    "    return (l_x, l_v)\n",
    "\n",
    "plt.rcParams['animation.html'] = 'html5'\n",
    "\n",
    "anim = animation.FuncAnimation(fig, animate, init_func=init,\n",
    "                               frames=50, interval=100, blit=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "anim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def euler2(x0, v0):\n",
    "  v1 = v0 + (-cc * v0- g) * dt\n",
    "  x1 = x0 + v0 * dt\n",
    "  return [x1, v1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "g, dt, cc=0.1, 1, 0.1\n",
    "tt,xx,vv=[0.0],[10.0],[0.0]\n",
    "t = 0.0\n",
    "for i in range(0,50):\n",
    "  t += dt\n",
    "  x, v = euler2(xx[-1],vv[-1])\n",
    "  tt.append(t)\n",
    "  xx.append(x)\n",
    "  vv.append(v)\n",
    "\n",
    "my_plot(xx, vv, tt)"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
